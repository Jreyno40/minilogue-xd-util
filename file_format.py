import struct
import collections

HEADER_SCHEMA = ('magic','<4s')

FILE_SCHEMA = [
  HEADER_SCHEMA,
  ('program_name','12s'),
  ('octave','B'),
  ('portamento','B'),
  ('key_trig','B'),
  ('voice_mode_depth','H'),
  ('voice_mode_type','B'),
  ('vco_1_wave','B'),
  ('vco_1_octave','B'),
  ('vco_1_pitch','H'),
  ('vco_1_shape','H'),
  ('vco_2_wave','B'),
  ('vco_2_octave','B'),
  ('vco_2_pitch','H'),
  ('vco_2_shape','H'),
  ('sync','B'),
  ('ring','B'),
  ('cross_mod_depth','H'),
  ('multi_type','B'),
  ('select_noise','B'),
  ('select_vpm','B'),
  ('select_user','B'),
  ('shape_noise','H'),
  ('shape_vpm','H'),
  ('shape_user','H'),
  ('shift_shape_noise','H'),
  ('shift_shape_vpm','H'),
  ('shift_shape_user','H'),
  ('vco_1_level','H'),
  ('vco_2_level','H'),
  ('multi_level','H'),
  ('cutoff','H'),
  ('resonance','H'),
  ('cutoff_drive','B'),
  ('cutoff_keyboard_track','B'),
  ('amp_eg_attack','H'),
  ('amp_eg_decay','H'),
  ('amp_eg_sustain','H'),
  ('amp_eg_release','H'),
  ('eg_attack','H'),
  ('eg_decay','H'),
  ('eg_int','H'),
  ('eg_target','B'),
  ('lfo_wave','B'),
  ('lfo_mode','B'),
  ('lfo_rate','H'),
  ('lfo_int','H'),
  ('lfo_target','B'),
  ('mod_fx_on_off','B'),
  ('mod_fx_type','B'),
  ('mod_fx_chorus','B'),
  ('mod_fx_ensemble','B'),
  ('mod_fx_phaser','B'),
  ('mod_fx_flanger','B'),
  ('mod_fx_user','B'),
  ('mod_fx_time','H'),
  ('mod_fx_depth','H'),
  ('delay_fx_on_off','B'),
  ('delay_sub_type','B'),
  ('delay_time','H'),
  ('delay_depth','H'),
  ('reverb_fx_on_off','B'),
  ('reverb_sub_type','B'),
  ('reverb_time','H'),
  ('reverb_depth','H'),
  ('x+_bend_range','B'),
  ('x-_bend_range','B'),
  ('y+_assign','B'),
  ('y+_range','B'),
  ('y-_assign','B'),
  ('y-_range','B'),
  ('cv_in_mode','B'),
  ('cv_in1_assign','B'),
  ('cv_in1_range','B'),
  ('cv_in2_assign','B'),
  ('cv_in2_range','B'),
  ('micro_tuning','B'),
  ('scale_key','B'),
  ('program_tuning','B'),
  ('lfo_key_sync','B'),
  ('lfo_voice_sync','B'),
  ('lfo_target_osc','B'),
  ('cutoff_velocity','B'),
  ('amp_velocity','B'),
  ('multi_octave','B'),
  ('multi_routing','B'),
  ('eg_legato','B'),
  ('portamento_mode','B'),
  ('portamento_bpm_sync','B'),
  ('program_level','B'),
  ('vpm_param1','B'),
  ('vpm_param2','B'),
  ('vpm_param3','B'),
  ('vpm_param4','B'),
  ('vpm_param5','B'),
  ('vpm_param6','B'),
  ('user_param1','B'),
  ('user_param2','B'),
  ('user_param3','B'),
  ('user_param4','B'),
  ('user_param5','B'),
  ('user_param6','B'),
  ('user_param_type','H'),
  ('program_transpose','B'),
  ('delay_dry_wet','H'),
  ('reverb_dry_wet','H'),
  ('midi_after_touch_assign','B'),
  ('pred','4s'),
  ('sq','2s'),
  ('active_step_off_on_steps_1_16','H'),
  ('bpm','H'),
  ('step_length','B'),
  ('step_resolution','B'),
  ('swing','B'),
  ('default_gate_time','B'),
  ('step_off_on_steps_1_16','H'),
  ('step_motion_off_on_steps_1_16','H'),
  ('motion_slot_1_parameter','H'),
  ('motion_slot_2_parameter','H'),
  ('motion_slot_3_parameter','H'),
  ('motion_slot_4_parameter','H'),
  ('motion_slot_1_off_on_steps_1_16','H'),
  ('motion_slot_2_off_on_steps_1_16','H'),
  ('motion_slot_3_off_on_steps_1_16','H'),
  ('motion_slot_4_off_on_steps_1_16','H'),
  ('step_1_event_data','52s'),
  ('step_2_event_data','52s'),
  ('step_3_event_data','52s'),
  ('step_4_event_data','52s'),
  ('step_5_event_data','52s'),
  ('step_6_event_data','52s'),
  ('step_7_event_data','52s'),
  ('step_8_event_data','52s'),
  ('step_9_event_data','52s'),
  ('step_10_event_data','52s'),
  ('step_11_event_data','52s'),
  ('step_12_event_data','52s'),
  ('step_13_event_data','52s'),
  ('step_14_event_data','52s'),
  ('step_15_event_data','52s'),
  ('step_16_event_data','52s'),
  ('arp_gate_time','B'),
  ('arp_rate','B')
]

MOTION_PARAMETERS = {
    0 : 'none',
   15 : 'portamento',
   16 : 'voice_mode_depth',
   17 : 'voice_mode_type',
   18 : 'vco_1_wave',
   19 : 'vco_1_octave',
   20 : 'vco_1_pitch',
   21 : 'vco_1_shape',
   22 : 'vco_2_wave',
   23 : 'vco_2_octave',
   24 : 'vco_2_pitch',
   25 : 'vco_2_shape',
   26 : 'sync',
   27 : 'ring',
   28 : 'cross_mod_depth',
   29 : 'multi_engine_type',
   30 : 'multi_engine_noise_type',
   31 : 'multi_engine_vpm_type',
   33 : 'multi_shape_noise',
   34 : 'multi_shape_vpm',
   35 : 'multi_shape_user',
   36 : 'multi_shift_shape_noise',
   37 : 'multi_shift_shape_vpm',
   38 : 'multi_shift_shape_user',
   39 : 'vco_1_level',
   40 : 'vco_2_level',
   41 : 'multi_engine_level',
   42 : 'cutoff',
   43 : 'resonance',
   45 : 'keytrack',
   46 : 'amp_eg_attack',
   47 : 'amp_eg_decay',
   48 : 'amp_eg_sustain',
   49 : 'amp_eg_release',
   50 : 'eg_attack',
   51 : 'eg_decay',
   52 : 'eg_int',
   53 : 'eg_target',
   54 : 'lfo_wave',
   55 : 'lfo_mode',
   56 : 'lfo_rate',
   57 : 'lfo_int',
   58 : 'lfo_target',
   59 : 'mod_fx_on_off',
   66 : 'mod_fx_time',
   67 : 'mod_fx_depth',
   68 : 'delay_on_off',
   70 : 'delay_time',
   71 : 'delay_depth',
   72 : 'reverb_on_off',
   74 : 'reverb_time',
   75 : 'reverb_depth',
  126 : 'pitch_bend',
  129 : 'gate_time'
}

ASSIGN_PARAMETERS = {
    0 : 'gate_time',
    1 : 'portamento',
    2 : 'v_m_depth',
    3 : 'vco_1_pitch',
    4 : 'vco_1_shape',
    5 : 'vco_2_pitch',
    6 : 'vco_2_shape',
    7 : 'cross_mod',
    8 : 'multi_shape',
    9 : 'vco_1_level',
   10 : 'vco_2_level',
   11 : 'multi_level',
   12 : 'cutoff',
   13 : 'resonance',
   14 : 'a_eg_attack',
   15 : 'a_eg_decay',
   16 : 'a_eg_sustain',
   17 : 'a_eg_release',
   18 : 'eg_attack',
   19 : 'eg_decay',
   20 : 'eg_int',
   21 : 'lfo_rate',
   22 : 'lfo_int',
   23 : 'mod_fx_speed',
   24 : 'mod_fx_depth',
   25 : 'reverb_time',
   26 : 'reverb_depth',
   27 : 'delay_time',
   28 : 'delay_depth'
}

MICRO_TUNING = {
    0 : 'equal_temp',
    1 : 'pure_major',
    2 : 'pure_minor',
    3 : 'pythagorean',
    4 : 'werckmeister',
    5 : 'kirnburger',
    6 : 'slendro',
    7 : 'pelog',
    8 : 'ionian',
    9 : 'dorian',
   10 : 'aeolian',
   11 : 'major_penta',
   12 : 'minor_penta',
   13 : 'reverse',
   14 : 'afx001',
   15 : 'afx002',
   16 : 'afx003',
   17 : 'afx004',
   18 : 'afx005',
   19 : 'afx006',
  128 : 'user_scale_1',
  129 : 'user_scale_2',
  130 : 'user_scale_3',
  131 : 'user_scale_4',
  132 : 'user_scale_5',
  133 : 'user_scale_6',
  134 : 'user_octave_1',
  135 : 'user_octave_2',
  136 : 'user_octave_3',
  137 : 'user_octave_4',
  138 : 'user_octave_5',
  139 : 'user_octave_6'
}

STEP_EVENT_SCHEMA = [
  ('note_1', '<b'),
  ('note_2', 'b'),
  ('note_3', 'b'),
  ('note_4', 'b'),
  ('note_5', 'b'),
  ('note_6', 'b'),
  ('note_7', 'b'),
  ('note_8', 'b'),
  ('velocity_1', 'b'),
  ('velocity_2', 'b'),
  ('velocity_3', 'b'),
  ('velocity_4', 'b'),
  ('velocity_5', 'b'),
  ('velocity_6', 'b'),
  ('velocity_7', 'b'),
  ('velocity_8', 'b'),
  ('gate_time_1', 'b'),
  ('gate_time_2', 'b'),
  ('gate_time_3', 'b'),
  ('gate_time_4', 'b'),
  ('gate_time_5', 'b'),
  ('gate_time_6', 'b'),
  ('gate_time_7', 'b'),
  ('gate_time_8', 'b'),
  ('motion_slot_1_data_1', 'b'),
  ('motion_slot_1_data_2','b'),
  ('motion_slot_1_data_3','b'),
  ('motion_slot_1_data_4','b'),
  ('motion_slot_1_data_5','b'),
  ('motion_slot_1_data_6','b'),
  ('motion_slot_1_data_7','b'),
  ('motion_slot_2_data_1','b'),
  ('motion_slot_2_data_2','b'),
  ('motion_slot_2_data_3','b'),
  ('motion_slot_2_data_4','b'),
  ('motion_slot_2_data_5','b'),
  ('motion_slot_2_data_6','b'),
  ('motion_slot_2_data_7','b'),
  ('motion_slot_3_data_1','b'),
  ('motion_slot_3_data_2','b'),
  ('motion_slot_3_data_3','b'),
  ('motion_slot_3_data_4','b'),
  ('motion_slot_3_data_5','b'),
  ('motion_slot_3_data_6','b'),
  ('motion_slot_3_data_7','b'),
  ('motion_slot_4_data_1','b'),
  ('motion_slot_4_data_2','b'),
  ('motion_slot_4_data_3','b'),
  ('motion_slot_4_data_4','b'),
  ('motion_slot_4_data_5','b'),
  ('motion_slot_4_data_6','b'),
  ('motion_slot_4_data_7','b'),
]

def unpack(binary, structure):
  format_string = ''.join(map(lambda x: x[1], structure))
  unpacked = struct.unpack(format_string, binary)
  names = map(lambda x : x[0], structure)

  if len(unpacked) != len(names):
    raise ValueError("Expected to get back %d elements from struct.unpack but got %d" % (len(names), len(unpacked)))

  return collections.OrderedDict(zip(names, unpacked))

